// Mocks generated by Mockito 5.4.6 from annotations
// in taskmanager/test/mock/mock_task_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:taskmanager/domain/entities/result.dart' as _i2;
import 'package:taskmanager/domain/repositories/task_repository.dart' as _i3;
import 'package:taskmanager/models/task_model.dart' as _i6;
import 'package:taskmanager/models/task_response.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRepository extends _i1.Mock implements _i3.TaskRepository {
  MockTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Result<bool>> checkHealth() => (super.noSuchMethod(
        Invocation.method(
          #checkHealth,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #checkHealth,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<_i5.TasksResponse>> getAllTasks() => (super.noSuchMethod(
        Invocation.method(
          #getAllTasks,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.TasksResponse>>.value(_FakeResult_0<_i5.TasksResponse>(
          this,
          Invocation.method(
            #getAllTasks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.TasksResponse>>);

  @override
  _i4.Future<_i2.Result<_i6.Task>> getTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #getTask,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Result<_i6.Task>>.value(_FakeResult_0<_i6.Task>(
          this,
          Invocation.method(
            #getTask,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i6.Task>>);

  @override
  _i4.Future<_i2.Result<_i6.Task>> createTask({
    required String? title,
    required int? timeLimitMinutes,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [],
          {
            #title: title,
            #timeLimitMinutes: timeLimitMinutes,
          },
        ),
        returnValue: _i4.Future<_i2.Result<_i6.Task>>.value(_FakeResult_0<_i6.Task>(
          this,
          Invocation.method(
            #createTask,
            [],
            {
              #title: title,
              #timeLimitMinutes: timeLimitMinutes,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<_i6.Task>>);

  @override
  _i4.Future<_i2.Result<_i6.Task>> completeTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #completeTask,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Result<_i6.Task>>.value(_FakeResult_0<_i6.Task>(
          this,
          Invocation.method(
            #completeTask,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i6.Task>>);

  @override
  _i4.Future<_i2.Result<_i6.Task>> checkTaskExpiry(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #checkTaskExpiry,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Result<_i6.Task>>.value(_FakeResult_0<_i6.Task>(
          this,
          Invocation.method(
            #checkTaskExpiry,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i6.Task>>);

  @override
  _i4.Future<_i2.Result<void>> deleteTask(int? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i4.Future<_i2.Result<void>>.value(_FakeResult_0<void>(
          this,
          Invocation.method(
            #deleteTask,
            [taskId],
          ),
        )),
      ) as _i4.Future<_i2.Result<void>>);

  @override
  _i4.Future<_i2.Result<_i5.TaskStatsResponse>> getTaskStats() => (super.noSuchMethod(
        Invocation.method(
          #getTaskStats,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<_i5.TaskStatsResponse>>.value(_FakeResult_0<_i5.TaskStatsResponse>(
          this,
          Invocation.method(
            #getTaskStats,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.TaskStatsResponse>>);
}
